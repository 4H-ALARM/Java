// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2079.Java;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    
    public static SpeedController driveTrainVictor1;
    public static SpeedController driveTrainVictor2;
    public static DifferentialDrive driveTrainRobotDrive2Motor;
    public static VictorSP claw;
    public static Compressor pneumaticsCompressor1;
    public static DoubleSolenoid pneumaticsDoubleSolenoid1;
    

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainVictor1 = new VictorSP(0);
        LiveWindow.addActuator("DriveTrain", "Victor1", (VictorSP) driveTrainVictor1);
        driveTrainVictor1.setInverted(false);
        driveTrainVictor2 = new VictorSP(1);
        LiveWindow.addActuator("DriveTrain", "Victor2", (VictorSP) driveTrainVictor2);
        driveTrainVictor2.setInverted(false);
        driveTrainRobotDrive2Motor = new DifferentialDrive(driveTrainVictor1, driveTrainVictor2);
        
        driveTrainRobotDrive2Motor.setSafetyEnabled(true);
        driveTrainRobotDrive2Motor.setExpiration(0.1);
     
        driveTrainRobotDrive2Motor.setMaxOutput(1.0);

        claw = new VictorSP(2);
        LiveWindow.addActuator("Claw", "Victor 3", (VictorSP) claw);
        claw.setInverted(false);
        pneumaticsCompressor1 = new Compressor(1);
        
        LiveWindow.addActuator("Pneumatics", "Compressor 1", pneumaticsCompressor1);
        
        pneumaticsDoubleSolenoid1 = new DoubleSolenoid(1, 0, 1);
        
        LiveWindow.addActuator("Pneumatics", "Double Solenoid 1", pneumaticsDoubleSolenoid1);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainRobotDrive2Motor = new DifferentialDrive(driveTrainVictor1, driveTrainVictor2);
        driveTrainRobotDrive2Motor.setSafetyEnabled(true);
        driveTrainRobotDrive2Motor.setExpiration(0.1);
        driveTrainRobotDrive2Motor.setMaxOutput(1.0);
        
    // create the claw motor controller on PWM channel
        
    }
}
