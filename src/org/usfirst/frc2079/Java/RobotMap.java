package org.usfirst.frc2079.Java;


import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

public class RobotMap {
    
    public static SpeedController dtSpark1;
    public static SpeedController dtSpark2;
    public static SpeedControllerGroup dtSCG1;
    
    public static SpeedController dtSpark3;
    public static SpeedController dtSpark4;
    public static SpeedControllerGroup dtSCG2;
    
    public static DifferentialDrive dtDrive;
    
    public static Spark clawLeft;
    public static Spark clawRight;
    public static SpeedControllerGroup clawSCG;
    
    public static SpeedController winch;
    
    public static Compressor compressor;
    public static DoubleSolenoid dsClawTilt;
    public static Solenoid dsClawDeploy;
    public static Solenoid dsArmControl;
    
    
    public static DigitalInput intakeLimit;
    //public static PowerDistributionPanel pdp;
    
    @SuppressWarnings("deprecation")
	public static void init() {
    	//Drive Train initializations
    	dtSpark1 = new Spark(0);
        LiveWindow.addActuator("DriveTrain", "Spark1", (Spark) dtSpark1);
        dtSpark1.setInverted(false);
        dtSpark2 = new Spark(1);
        LiveWindow.addActuator("DriveTrain", "Spark2", (Spark) dtSpark2);
        dtSpark2.setInverted(false);
        dtSpark3 = new Spark(2);
        LiveWindow.addActuator("DriveTrain", "Spark1", (Spark) dtSpark3);
        dtSpark3.setInverted(false);
        dtSpark4 = new Spark(3);
        LiveWindow.addActuator("DriveTrain", "Spark2", (Spark) dtSpark4);
        dtSpark4.setInverted(false);
        dtSCG1 = new SpeedControllerGroup(dtSpark1,dtSpark2);//Left side of robot
        dtSCG2 = new SpeedControllerGroup(dtSpark3,dtSpark4);//Right side of robot		
        dtDrive = new DifferentialDrive(dtSCG1,dtSCG2); //Left+Right side of the robot controlled by tank drive controls
        
        dtDrive.setSafetyEnabled(true);
        dtDrive.setExpiration(0.1);
        dtDrive.setMaxOutput(1.0);

        //Claw initializations
        clawLeft = new Spark(4);
        clawLeft.setInverted(false);   
        LiveWindow.addActuator("Claw", "Spark4", (Spark) clawLeft);
        clawRight = new Spark(5);
        clawRight.setInverted(false);
        LiveWindow.addActuator("Claw", "Spark5", (Spark) clawRight);
        clawSCG = new SpeedControllerGroup(clawLeft, clawRight); //Both claw motors controlled by one command
        
        //Winch initialization
        winch = new Spark(6);
        LiveWindow.addActuator("Winch", "Spark6", (Spark) winch);
        
        //Pneumatics initializations
        compressor = new Compressor(1);
        LiveWindow.addActuator("Pneumatics", "Compressor 1", compressor);
        dsClawTilt = new DoubleSolenoid(1, 0, 1);
        LiveWindow.addActuator("Pneumatics", "Solenoid 1", dsClawTilt);
        dsClawDeploy = new Solenoid(1);
        LiveWindow.addActuator("Pneumatics", "Solenoid 1", dsClawDeploy);
        dsArmControl = new Solenoid(2);
        LiveWindow.addActuator("Pneumatics", "Double Solenoid 1", dsArmControl);
        
        //Limit switch initialization
        intakeLimit = new DigitalInput(3);
    }
}
